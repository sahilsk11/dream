{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["LeftNavBar","props","style","height","width","backgroundColor","margin","marginTop","marginBottom","paddingBottom","textAlign","fontSize","display","maxWidth","src","DreamBubble","title","updateContent","useState","mouseHover","updateMouseHover","bubbleStyle","border","cursor","onClick","onMouseEnter","onMouseLeave","ContentContainer","minHeight","dataContainers","forEach","dataContainer","push","graphs","data","graphData","labels","completedLabel","incompletedLabel","datasets","completed","total","hoverBackgroundColor","options","legend","text","percent","position","layout","padding","left","right","responsive","DoughnutGraph","paddingTop","justifyContent","flexWrap","DataContainer","PageContent","pageData","App","school","gym","contentDisplay","d","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.81bca439.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Doughnut } from 'react-chartjs-2';\n\nfunction App() {\n  const data = {\n    school: [{\n      title: \"Class Attendance\",\n      data: [\n        {\n          title: \"Econ Lecture\",\n          completed: 1,\n          total: 6,\n          percent: 17,\n          completedLabel: \"attended\",\n          incompletedLabel: \"missed\"\n        },\n        {\n          title: \"Data Structures Lecture\",\n          completed: 9,\n          total: 9,\n          percent: 100,\n          completedLabel: \"attended\",\n          incompletedLabel: \"missed\"\n        },\n        {\n          title: \"Comp Arch Lecture\",\n          completed: 7,\n          total: 9,\n          percent: 78,\n          completedLabel: \"attended\",\n          incompletedLabel: \"missed\"\n        },\n        {\n          title: \"COM Lecture\",\n          completed: 9,\n          total: 9,\n          percent: 100,\n          completedLabel: \"attended\",\n          incompletedLabel: \"missed\"\n        },\n        {\n          title: \"CP Lecture\",\n          completed: 0,\n          total: 3,\n          percent: 0,\n          completedLabel: \"attended\",\n          incompletedLabel: \"missed\"\n        },\n        {\n          title: \"HONR 399 Lecture\",\n          completed: 6,\n          total: 6,\n          percent: 100,\n          completedLabel: \"attended\",\n          incompletedLabel: \"missed\"\n        },\n      ]\n    }],\n    gym: [{\n      title: \"Weekly Sets\",\n      data: [\n        {\n          title: \"Biceps\",\n          completed: 6,\n          total: 20,\n          percent: 30,\n          completedLabel: \"completed\",\n          incompletedLabel: \"remaining\"\n        },\n      ]\n    }],\n    gym: [\n      {\n        title: \"Weekly Sets\",\n        data: [\n          {\n            title: \"Biceps\",\n            completed: 6,\n            total: 20,\n            percent: 30,\n            completedLabel: \"completed\",\n            incompletedLabel: \"remaining\"\n          },\n        ]\n      },\n      {\n        title: \"Weekly Workout\",\n        data: [\n          {\n            title: \"Biceps\",\n            completed: 6,\n            total: 20,\n            percent: 30,\n            completedLabel: \"completed\",\n            incompletedLabel: \"remaining\"\n          },\n        ]\n      },\n    ],\n    health: [\n      {\n        title: \"Daily Calories\",\n        data: [\n          {\n            title: \"Thursday\",\n            completed: 400,\n            total: 3000,\n            percent: 1,\n            completedLabel: \"completed\",\n            incompletedLabel: \"remaining\"\n          },\n        ]\n      },\n    ],\n    games: [\n      {\n        title: \"Hours Played\",\n        data: [\n          {\n            title: \"Wednesday\",\n            completed: 6,\n            total: 20,\n            percent: 30,\n            completedLabel: \"completed\",\n            incompletedLabel: \"remaining\"\n          },\n        ]\n      },\n      {\n        title: \"Games Won\",\n        data: [\n          {\n            title: \"Wednesday\",\n            completed: 2,\n            total: 20,\n            percent: 10,\n            completedLabel: \"completed\",\n            incompletedLabel: \"remaining\"\n          },\n        ]\n      },\n    ]\n  }\n  const [contentDisplay, updateContent] = useState(\"school\");\n  const [pageData, updatePageData] = useState(data);\n  const [requestSent, updateRequestSent] = useState(false);\n  const containerStyle = {\n    display: \"flex\",\n    width: \"100%\",\n    position: \"relative\",\n    justifyContent: \"center\",\n    paddingTop: \"3%\"\n  }\n  /*if (!requestSent) {\n    fetch(\"http://localhost:8080\").then(response => response.json()).then(data => {\n      updatePageData(data);\n      updateRequestSent(true);\n    });\n  } */\n  if (pageData == null) {\n    return null;\n  } else {\n    return (\n      <div style={containerStyle}>\n        {<LeftNavBar updateContent={updateContent} />}\n        {<ContentContainer d  pageData={pageData[contentDisplay]} />}\n      </div>\n    );\n  }\n}\n\nfunction LeftNavBar(props) {\n  const navStyle = {\n    height: \"90vh\",\n    width: \"20%\",\n    backgroundColor: \"white\",\n    margin: \"5%\",\n    marginTop: \"0px\"\n  };\n  const title = {\n    marginTop: \"20px\",\n    marginBottom: \"0px\",\n    paddingBottom: \"0px\",\n    textAlign: \"center\",\n    backgroundColor: \"white\",\n  }\n  const iconStyle = {\n    margin: \"0px auto\",\n    display: \"block\",\n    width: \"50%\",\n    marginTop: \"20px\",\n    marginBottom: \"40px\",\n    maxWidth: \"90px\"\n  }\n  const acronymStyle = {\n    fontSize: \"10px\",\n    textAlign: \"center\"\n  }\n  return (\n    <div style={navStyle}>\n      <h1 style={title}>DREAM</h1>\n      <p style={acronymStyle}><em>data rules everything around me</em></p>\n      <img style={iconStyle} src=\"./dream.png\" />\n      {DreamBubble({ title: \"school\", updateContent: props.updateContent })}\n      {DreamBubble({ title: \"gym\", updateContent: props.updateContent })}\n      {DreamBubble({ title: \"health\", updateContent: props.updateContent })}\n      {DreamBubble({ title: \"games\", updateContent: props.updateContent })}\n      {/*DreamBubble({ title: \"privacy\" })*/}\n    </div>\n  );\n}\n\nfunction DreamBubble(props) {\n  const [mouseHover, updateMouseHover] = useState(false);\n  let bubbleStyle = {\n    border: \"3px solid black\",\n    width: \"100px\",\n    height: \"40px\",\n    display: \"block\",\n    margin: \"0px auto\",\n    marginBottom: \"60px\",\n    cursor: \"pointer\",\n    backgroundColor: mouseHover ? \"#7880FF\" : \"white\",\n  }\n  const labelStyle = {\n    textAlign: \"center\",\n    margin: \"12px\",\n  }\n  return (\n    <div style={bubbleStyle} onClick={() => props.updateContent(props.title)} onMouseEnter={() => updateMouseHover(true)} onMouseLeave={() => updateMouseHover(false)}>\n      <h5 style={labelStyle}>{props.title}</h5>\n    </div>\n  )\n}\n\nfunction ContentContainer(props) {\n  const containerWrapperStyle = {\n    width: \"80%\",\n    minHeight: \"90vh\"\n  }\n  const pageContentStyle = {\n    backgroundColor: \"white\",\n    height: \"90%\",\n    margin: \"5%\",\n    marginTop: \"0px\"\n  }\n  return (\n    <div style={containerWrapperStyle}>\n      <div style={pageContentStyle}>\n        {PageContent(props.pageData)}\n      </div>\n    </div>\n  )\n}\n\nfunction PageContent(props) {\n  let dataContainers = [];\n  props.forEach(dataContainer => {\n    dataContainers.push(\n      <div>\n        {DataContainer(dataContainer)}\n      </div>\n    );\n  })\n  return (\n    <div>\n      {dataContainers}\n    </div>\n  );\n}\n\nfunction DataContainer(props) {\n  const graphContainerStyle = {\n    display: \"flex\",\n    position: \"relative\",\n    justifyContent: \"center\",\n    maxWidth: \"100%\",\n    flexWrap: \"wrap\"\n  }\n  const titleStyle = {\n    paddingTop: \"2%\",\n    marginTop: \"0px\",\n    textAlign: \"center\"\n  }\n  let graphs = [];\n  props.data.forEach(graphData => {\n    graphs.push(\n      <div>\n        {DoughnutGraph(graphData)}\n      </div>\n    )\n  });\n  return (\n    <div>\n      <h2 style={titleStyle}>{props.title}</h2>\n      <div style={graphContainerStyle}>\n        {graphs}\n      </div>\n    </div>\n  );\n}\n\nfunction DoughnutGraph(props) {\n  const donutTitle = {\n    textAlign: \"center\",\n    margin: \"0px\",\n    marginBottom: \"10px\"\n  }\n  const donutContainer = {\n    marginBottom: \"50px\"\n  }\n  const data = {\n    labels: [\n      props.completedLabel,\n      props.incompletedLabel\n    ],\n    datasets: [{\n      data: [props.completed, props.total - props.completed],\n      backgroundColor: [\n        '#7880FF',\n        '#d6d6d6',\n      ],\n      hoverBackgroundColor: [\n        'green',\n        '#b5b5b5',\n      ]\n    }]\n  };\n  const options = {\n    legend: {\n      display: false\n    },\n    title: {\n      text: props.percent,\n      display: false,\n      position: \"bottom\"\n    },\n    layout: {\n      padding: {\n        left: 0,\n        right: 0\n      }\n    },\n    responsive: true\n  }\n  return (\n    <div style={donutContainer}>\n      <h3 style={donutTitle}>{props.title}</h3>\n      <Doughnut data={data} options={options} />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}